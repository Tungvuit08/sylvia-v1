module.exports.config = {
    name: "anhvip",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "LunarTeam",
    description: "g·ª≠i ·∫£nh theo keyword",
    commandCategory: "Media",
    usages: "[keyword]",
    cooldowns: 5
};

module.exports.run = async ({ api, event, args }) => {
    const axios = require("axios");
    const fs = require("fs");
    const path = require("path");

    // Define API URL
    const API_URL = "https://imgs-api.vercel.app/"; // Base URL for the API
    const API_KEY = "mk001"; // API key

    // Define the menu
    const keywords = {
        "girl": "·∫¢nh g√°i xinh.",
        "du": "·∫¢nh d√∫.",
        "mong": "·∫¢nh m√¥ng.",
        "capdoi": "·∫¢nh c·∫∑p ƒë√¥i.",
        "gainhat": "·∫¢nh g√°i nh·∫≠t.",
        "hana": "·∫¢nh hana.",
        "ausand": "·∫¢nh ausand.",
        "jimmy": "·∫¢nh jimmy.",
        "jack": "·∫¢nh jack.",
        "khanhuyen": "·∫¢nh kh√°nh huy·ªÅn.",
        "lebong": "·∫¢nh l√™ b·ªëng.",
        "linhngocdam": "·∫¢nh linh ng·ªçc ƒë√†m.",
        "ngoctrinh": "·∫¢nh ng·ªçc trinh.",
        "naughty": "·∫¢nh naughty.",
        "japcosplay": "·∫¢nh japan cosplay.",
        "loli": "·∫¢nh loli.",
        "caidloli": "·∫¢nh caid loli.",
        "tw": "·∫¢nh g√°i trung qu·ªëc.",
        "nsfw": "·∫¢nh nsfw.",
        "anime": "·∫¢nh anime.",
        "aqua": "·∫¢nh aqua.",
        "chitanda": "·∫¢nh chitanda.",
        "kana": "·∫¢nh kana.",
        "kurumi": "·∫¢nh kurumi.",
        "lucy": "·∫¢nh lucy.",
        "mirai": "·∫¢nh mirai.",
        "rem": "·∫¢nh rem.",
        "sagiri": "·∫¢nh sagiri.",
        "umaru": "·∫¢nh umaru.",
        "rushia": "·∫¢nh rushia."
    };

    // If no keyword is provided, display the menu
    if (!args[0]) {
        let menu = "===== „Äé MENU KEYWORDS „Äè =====\n";
        menu += "\nKEY WORDS\nName\tDescription\n";
        for (const [key, description] of Object.entries(keywords)) {
            menu += `\n${key}\t${description}`;
        }
        menu += "\n\nH√£y ch·ªçn m·ªôt t·ª´ kh√≥a v√† nh·∫≠p l·ªánh v·ªõi t·ª´ kh√≥a ƒë√≥.";

        return api.sendMessage(menu, event.threadID, event.messageID);
    }

    // Get keyword from user arguments
    const keyword = args[0];

    // Validate keyword
    if (!keywords[keyword]) {
        return api.sendMessage("‚ùå T·ª´ kh√≥a kh√¥ng h·ª£p l·ªá. H√£y nh·∫≠p l·ªánh m√† kh√¥ng c√≥ tham s·ªë ƒë·ªÉ xem danh s√°ch t·ª´ kh√≥a.", event.threadID, event.messageID);
    }

    try {
        // Construct the API URL for the keyword and API key
        const imageURL = `${API_URL}${keyword}?apikey=${API_KEY}`;

        // Make API call to fetch image
        const response = await axios.get(imageURL);

        const { url, author } = response.data;

        if (!url) {
            api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh v·ªõi t·ª´ kh√≥a b·∫°n cung c·∫•p.", event.threadID, event.messageID);
            return;
        }

        const ext = path.extname(url); // Extract file extension
        const filePath = path.resolve(__dirname, `cache/character${ext}`);

        // Download image
        const writer = fs.createWriteStream(filePath);
        const imageStream = await axios({
            url: url,
            method: "GET",
            responseType: "stream"
        });
        imageStream.data.pipe(writer);

        writer.on("finish", () => {
            api.sendMessage({
                body: `===== „Äé ùêÇùêáùêÄùêëùêÄùêÇùêìùêÑùêë ùêàùêåùêÄùêÜùêÑ „Äè =====\n‚û¢ T·ª´ kh√≥a: ${keyword}\n‚û¢ T√°c gi·∫£: ${author || "Kh√¥ng r√µ"}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
                attachment: fs.createReadStream(filePath)
            }, event.threadID, () => {
                fs.unlinkSync(filePath); // Clean up file after sending
            }, event.messageID);
        });

        writer.on("error", (err) => {
            console.error("Error writing image file:", err);
        });

    } catch (error) {
        console.error("Error occurred:", error);
        api.shareContact(`‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh.\nLi√™n h·ªá Admin: ${global.config.AMDIN_NAME} ƒë·ªÉ b√°o c√°o l·ªói!`, global.config.NDH[0], event.threadID, event.messageID);
    }
};
